// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain.slot;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.specialization.*;
import org.dddappp.suiinscription.domain.slot.SlotEvent.*;

public abstract class AbstractSlotState implements SlotState.SqlSlotState {

    private Integer slotNumber;

    public Integer getSlotNumber() {
        return this.slotNumber;
    }

    public void setSlotNumber(Integer slotNumber) {
        this.slotNumber = slotNumber;
    }

    private String id_;

    public String getId_() {
        return this.id_;
    }

    public void setId_(String id) {
        this.id_ = id;
    }

    private BigInteger genesisTimestamp;

    public BigInteger getGenesisTimestamp() {
        return this.genesisTimestamp;
    }

    public void setGenesisTimestamp(BigInteger genesisTimestamp) {
        this.genesisTimestamp = genesisTimestamp;
    }

    private BigInteger slotMaxAmount;

    public BigInteger getSlotMaxAmount() {
        return this.slotMaxAmount;
    }

    public void setSlotMaxAmount(BigInteger slotMaxAmount) {
        this.slotMaxAmount = slotMaxAmount;
    }

    private BigInteger mintedAmount;

    public BigInteger getMintedAmount() {
        return this.mintedAmount;
    }

    public void setMintedAmount(BigInteger mintedAmount) {
        this.mintedAmount = mintedAmount;
    }

    private BigInteger round;

    public BigInteger getRound() {
        return this.round;
    }

    public void setRound(BigInteger round) {
        this.round = round;
    }

    private BigInteger qualifiedRound;

    public BigInteger getQualifiedRound() {
        return this.qualifiedRound;
    }

    public void setQualifiedRound(BigInteger qualifiedRound) {
        this.qualifiedRound = qualifiedRound;
    }

    private String qualifiedInscriptionId;

    public String getQualifiedInscriptionId() {
        return this.qualifiedInscriptionId;
    }

    public void setQualifiedInscriptionId(String qualifiedInscriptionId) {
        this.qualifiedInscriptionId = qualifiedInscriptionId;
    }

    private int[] qualifiedHash;

    public int[] getQualifiedHash() {
        return this.qualifiedHash;
    }

    public void setQualifiedHash(int[] qualifiedHash) {
        this.qualifiedHash = qualifiedHash;
    }

    private BigInteger qualifiedTimestamp;

    public BigInteger getQualifiedTimestamp() {
        return this.qualifiedTimestamp;
    }

    public void setQualifiedTimestamp(BigInteger qualifiedTimestamp) {
        this.qualifiedTimestamp = qualifiedTimestamp;
    }

    private BigInteger qualifiedDifference;

    public BigInteger getQualifiedDifference() {
        return this.qualifiedDifference;
    }

    public void setQualifiedDifference(BigInteger qualifiedDifference) {
        this.qualifiedDifference = qualifiedDifference;
    }

    private String candidateInscriptionId;

    public String getCandidateInscriptionId() {
        return this.candidateInscriptionId;
    }

    public void setCandidateInscriptionId(String candidateInscriptionId) {
        this.candidateInscriptionId = candidateInscriptionId;
    }

    private int[] candidateHash;

    public int[] getCandidateHash() {
        return this.candidateHash;
    }

    public void setCandidateHash(int[] candidateHash) {
        this.candidateHash = candidateHash;
    }

    private String candidateInscriber;

    public String getCandidateInscriber() {
        return this.candidateInscriber;
    }

    public void setCandidateInscriber(String candidateInscriber) {
        this.candidateInscriber = candidateInscriber;
    }

    private BigInteger candidateTimestamp;

    public BigInteger getCandidateTimestamp() {
        return this.candidateTimestamp;
    }

    public void setCandidateTimestamp(BigInteger candidateTimestamp) {
        this.candidateTimestamp = candidateTimestamp;
    }

    private BigInteger candidateAmount;

    public BigInteger getCandidateAmount() {
        return this.candidateAmount;
    }

    public void setCandidateAmount(BigInteger candidateAmount) {
        this.candidateAmount = candidateAmount;
    }

    private BigInteger candidateNonce;

    public BigInteger getCandidateNonce() {
        return this.candidateNonce;
    }

    public void setCandidateNonce(BigInteger candidateNonce) {
        this.candidateNonce = candidateNonce;
    }

    private BigInteger candidateDifference;

    public BigInteger getCandidateDifference() {
        return this.candidateDifference;
    }

    public void setCandidateDifference(BigInteger candidateDifference) {
        this.candidateDifference = candidateDifference;
    }

    private String candidateContent;

    public String getCandidateContent() {
        return this.candidateContent;
    }

    public void setCandidateContent(String candidateContent) {
        this.candidateContent = candidateContent;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractSlotState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setSlotNumber(((SlotEvent.SqlSlotEvent) events.get(0)).getSlotEventId().getSlotNumber());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? SlotState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractSlotState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getSlotNumber().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof SlotState) {
            return Objects.equals(this.getSlotNumber(), ((SlotState)obj).getSlotNumber());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractSlotEvent.SlotCreated) {
            when((AbstractSlotEvent.SlotCreated)e);
        } else if (e instanceof AbstractSlotEvent.CandidateInscriptionPutUp) {
            when((AbstractSlotEvent.CandidateInscriptionPutUp)e);
        } else if (e instanceof AbstractSlotEvent.SlotAdvanced) {
            when((AbstractSlotEvent.SlotAdvanced)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    protected void merge(SlotState s) {
        if (s == this) {
            return;
        }
        this.setGenesisTimestamp(s.getGenesisTimestamp());
        this.setSlotMaxAmount(s.getSlotMaxAmount());
        this.setMintedAmount(s.getMintedAmount());
        this.setRound(s.getRound());
        this.setQualifiedRound(s.getQualifiedRound());
        this.setQualifiedInscriptionId(s.getQualifiedInscriptionId());
        this.setQualifiedHash(s.getQualifiedHash());
        this.setQualifiedTimestamp(s.getQualifiedTimestamp());
        this.setQualifiedDifference(s.getQualifiedDifference());
        this.setCandidateInscriptionId(s.getCandidateInscriptionId());
        this.setCandidateHash(s.getCandidateHash());
        this.setCandidateInscriber(s.getCandidateInscriber());
        this.setCandidateTimestamp(s.getCandidateTimestamp());
        this.setCandidateAmount(s.getCandidateAmount());
        this.setCandidateNonce(s.getCandidateNonce());
        this.setCandidateDifference(s.getCandidateDifference());
        this.setCandidateContent(s.getCandidateContent());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(AbstractSlotEvent.SlotCreated e) {
        throwOnWrongEvent(e);

        BigInteger genesisTimestamp = e.getGenesisTimestamp();
        BigInteger GenesisTimestamp = genesisTimestamp;
        BigInteger slotMaxAmount = e.getSlotMaxAmount();
        BigInteger SlotMaxAmount = slotMaxAmount;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SlotState updatedSlotState = (SlotState) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.slot.CreateLogic",
                    "mutate",
                    new Class[]{SlotState.class, BigInteger.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, genesisTimestamp, slotMaxAmount, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddappp.suiinscription.domain.slot;
//
//public class CreateLogic {
//    public static SlotState mutate(SlotState slotState, BigInteger genesisTimestamp, BigInteger slotMaxAmount, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<SlotState, SlotState.MutableSlotState> mutationContext) {
//    }
//}

        if (this != updatedSlotState) { merge(updatedSlotState); } //else do nothing

    }

    public void when(AbstractSlotEvent.CandidateInscriptionPutUp e) {
        throwOnWrongEvent(e);

        String candidateInscriptionId = e.getCandidateInscriptionId();
        String CandidateInscriptionId = candidateInscriptionId;
        BigInteger round = e.getRound();
        BigInteger Round = round;
        int[] candidateHash = e.getCandidateHash();
        int[] CandidateHash = candidateHash;
        String candidateInscriber = e.getCandidateInscriber();
        String CandidateInscriber = candidateInscriber;
        BigInteger candidateTimestamp = e.getCandidateTimestamp();
        BigInteger CandidateTimestamp = candidateTimestamp;
        BigInteger candidateAmount = e.getCandidateAmount();
        BigInteger CandidateAmount = candidateAmount;
        BigInteger candidateNonce = e.getCandidateNonce();
        BigInteger CandidateNonce = candidateNonce;
        BigInteger candidateDifference = e.getCandidateDifference();
        BigInteger CandidateDifference = candidateDifference;
        String candidateContent = e.getCandidateContent();
        String CandidateContent = candidateContent;
        Boolean successful = e.getSuccessful();
        Boolean Successful = successful;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SlotState updatedSlotState = (SlotState) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.slot.PutUpCandidateLogic",
                    "mutate",
                    new Class[]{SlotState.class, String.class, BigInteger.class, int[].class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, Boolean.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, candidateInscriptionId, round, candidateHash, candidateInscriber, candidateTimestamp, candidateAmount, candidateNonce, candidateDifference, candidateContent, successful, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddappp.suiinscription.domain.slot;
//
//public class PutUpCandidateLogic {
//    public static SlotState mutate(SlotState slotState, String candidateInscriptionId, BigInteger round, int[] candidateHash, String candidateInscriber, BigInteger candidateTimestamp, BigInteger candidateAmount, BigInteger candidateNonce, BigInteger candidateDifference, String candidateContent, Boolean successful, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<SlotState, SlotState.MutableSlotState> mutationContext) {
//    }
//}

        if (this != updatedSlotState) { merge(updatedSlotState); } //else do nothing

    }

    public void when(AbstractSlotEvent.SlotAdvanced e) {
        throwOnWrongEvent(e);

        BigInteger round = e.getRound();
        BigInteger Round = round;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SlotState updatedSlotState = (SlotState) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.slot.AdvanceLogic",
                    "mutate",
                    new Class[]{SlotState.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, round, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddappp.suiinscription.domain.slot;
//
//public class AdvanceLogic {
//    public static SlotState mutate(SlotState slotState, BigInteger round, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<SlotState, SlotState.MutableSlotState> mutationContext) {
//    }
//}

        if (this != updatedSlotState) { merge(updatedSlotState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(SlotEvent event) {
        Integer stateEntityId = this.getSlotNumber(); // Aggregate Id
        Integer eventEntityId = ((SlotEvent.SqlSlotEvent)event).getSlotEventId().getSlotNumber(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleSlotState extends AbstractSlotState {

        public SimpleSlotState() {
        }

        public SimpleSlotState(List<Event> events) {
            super(events);
        }

        public static SimpleSlotState newForReapplying() {
            SimpleSlotState s = new SimpleSlotState();
            s.initializeForReapplying();
            return s;
        }

    }



}

