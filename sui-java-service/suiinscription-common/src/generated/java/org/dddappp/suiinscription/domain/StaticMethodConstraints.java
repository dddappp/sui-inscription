// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain;

import org.dddappp.suiinscription.specialization.ReflectUtils;
import org.dddappp.suiinscription.specialization.MutationContext;
import org.dddappp.suiinscription.specialization.VerificationContext;
import org.dddappp.suiinscription.domain.inscription.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.domain.certificate.*;
import org.dddappp.suiinscription.domain.slot.*;

public class StaticMethodConstraints {

    public static void assertStaticVerificationAndMutationMethods() {

        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.inscription.MintLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, InscriptionState.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "slotNumber", "round", "amount", "nonce", "content"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.inscription.DeleteLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, InscriptionState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.certificate.IssueLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, CertificateState.class, String.class, int[].class, Integer.class, BigInteger.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "inscriptionId", "inscriptionHash", "slotNumber", "round", "inscriber", "inscriptionTimestamp", "amount", "inscriptionNonce", "inscriptionContent"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.slot.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SlotState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.slot.PutUpCandidateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SlotState.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "candidateInscription"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.slot.AdvanceLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SlotState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.inscription.MintLogic",
                    "mutate",
                    new Class[]{InscriptionState.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "slotNumber", "round", "amount", "nonce", "content", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.inscription.DeleteLogic",
                    "mutate",
                    new Class[]{InscriptionState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.certificate.IssueLogic",
                    "mutate",
                    new Class[]{CertificateState.class, String.class, int[].class, Integer.class, BigInteger.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "inscriptionId", "inscriptionHash", "slotNumber", "round", "inscriber", "inscriptionTimestamp", "amount", "inscriptionNonce", "inscriptionContent", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.slot.CreateLogic",
                    "mutate",
                    new Class[]{SlotState.class, BigInteger.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "genesisTimestamp", "slotMaxAmount", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.slot.PutUpCandidateLogic",
                    "mutate",
                    new Class[]{SlotState.class, String.class, BigInteger.class, int[].class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "candidateInscriptionId", "round", "candidateHash", "candidateInscriber", "candidateTimestamp", "candidateAmount", "candidateNonce", "candidateDifference", "candidateContent", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.dddappp.suiinscription.domain.slot.AdvanceLogic",
                    "mutate",
                    new Class[]{SlotState.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "round", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );



    }

}


