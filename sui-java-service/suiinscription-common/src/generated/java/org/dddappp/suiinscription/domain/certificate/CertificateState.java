// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain.certificate;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.specialization.Event;

public interface CertificateState extends VersionedSuiMoveObject
{
    Long VERSION_ZERO = 0L;

    Long VERSION_NULL = VERSION_ZERO - 1;

    String getId();

    String getInscriptionId();

    int[] getInscriptionHash();

    Integer getSlotNumber();

    BigInteger getRound();

    String getInscriber();

    BigInteger getInscriptionTimestamp();

    BigInteger getAmount();

    BigInteger getInscriptionNonce();

    String getInscriptionContent();

    Long getOffChainVersion();

    String getCreatedBy();

    Date getCreatedAt();

    String getUpdatedBy();

    Date getUpdatedAt();

    Boolean getActive();

    Boolean getDeleted();

    interface MutableCertificateState extends CertificateState, VersionedSuiMoveObject.MutableVersionedSuiMoveObject {
        void setId(String id);

        void setInscriptionId(String inscriptionId);

        void setInscriptionHash(int[] inscriptionHash);

        void setSlotNumber(Integer slotNumber);

        void setRound(BigInteger round);

        void setInscriber(String inscriber);

        void setInscriptionTimestamp(BigInteger inscriptionTimestamp);

        void setAmount(BigInteger amount);

        void setInscriptionNonce(BigInteger inscriptionNonce);

        void setInscriptionContent(String inscriptionContent);

        void setOffChainVersion(Long offChainVersion);

        void setCreatedBy(String createdBy);

        void setCreatedAt(Date createdAt);

        void setUpdatedBy(String updatedBy);

        void setUpdatedAt(Date updatedAt);

        void setActive(Boolean active);

        void setDeleted(Boolean deleted);


        void mutate(Event e);

        //void when(CertificateEvent.CertificateStateCreated e);

        //void when(CertificateEvent.CertificateStateMergePatched e);

        //void when(CertificateEvent.CertificateStateDeleted e);
    }

    interface SqlCertificateState extends MutableCertificateState {

        boolean isStateUnsaved();

        boolean getForReapplying();
    }
}

