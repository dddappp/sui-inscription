// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain.inscription;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;

public class InscriptionCommands {
    private InscriptionCommands() {
    }

    public static class Mint extends AbstractInscriptionCommand implements InscriptionCommand {

        public String getCommandType() {
            return "Mint";
        }

        public void setCommandType(String commandType) {
            //do nothing
        }

        /**
         * Id
         */
        private String id;

        public String getId() {
            return this.id;
        }

        public void setId(String id) {
            this.id = id;
        }

        /**
         * Slot Number
         */
        private Integer slotNumber;

        public Integer getSlotNumber() {
            return this.slotNumber;
        }

        public void setSlotNumber(Integer slotNumber) {
            this.slotNumber = slotNumber;
        }

        /**
         * Round
         */
        private BigInteger round;

        public BigInteger getRound() {
            return this.round;
        }

        public void setRound(BigInteger round) {
            this.round = round;
        }

        /**
         * Amount
         */
        private BigInteger amount;

        public BigInteger getAmount() {
            return this.amount;
        }

        public void setAmount(BigInteger amount) {
            this.amount = amount;
        }

        /**
         * Nonce
         */
        private BigInteger nonce;

        public BigInteger getNonce() {
            return this.nonce;
        }

        public void setNonce(BigInteger nonce) {
            this.nonce = nonce;
        }

        /**
         * Content
         */
        private String content;

        public String getContent() {
            return this.content;
        }

        public void setContent(String content) {
            this.content = content;
        }

        /**
         * Clock
         */
        private String clock;

        public String getClock() {
            return this.clock;
        }

        public void setClock(String clock) {
            this.clock = clock;
        }

        /**
         * Off Chain Version
         */
        private Long offChainVersion;

        public Long getOffChainVersion() {
            return this.offChainVersion;
        }

        public void setOffChainVersion(Long offChainVersion) {
            this.offChainVersion = offChainVersion;
        }

    }

    public static class Delete extends AbstractInscriptionCommand implements InscriptionCommand {

        public String getCommandType() {
            return "Delete";
        }

        public void setCommandType(String commandType) {
            //do nothing
        }

        /**
         * Id
         */
        private String id;

        public String getId() {
            return this.id;
        }

        public void setId(String id) {
            this.id = id;
        }

        /**
         * Off Chain Version
         */
        private Long offChainVersion;

        public Long getOffChainVersion() {
            return this.offChainVersion;
        }

        public void setOffChainVersion(Long offChainVersion) {
            this.offChainVersion = offChainVersion;
        }

    }

}

