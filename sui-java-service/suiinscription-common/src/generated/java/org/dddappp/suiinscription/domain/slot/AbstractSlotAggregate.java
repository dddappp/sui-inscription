// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain.slot;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.specialization.*;

public abstract class AbstractSlotAggregate extends AbstractAggregate implements SlotAggregate {
    private SlotState.MutableSlotState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractSlotAggregate(SlotState state) {
        this.state = (SlotState.MutableSlotState)state;
    }

    public SlotState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        SlotCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleSlotAggregate extends AbstractSlotAggregate {
        public SimpleSlotAggregate(SlotState state) {
            super(state);
        }

        @Override
        public void create(String clock, Long offChainVersion, String commandId, String requesterId, SlotCommands.Create c) {
            java.util.function.Supplier<SlotEvent.SlotCreated> eventFactory = () -> newSlotCreated(clock, offChainVersion, commandId, requesterId);
            SlotEvent.SlotCreated e;
            try {
                e = verifyCreate(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void putUpCandidate(String candidateInscription, String clock, Long offChainVersion, String commandId, String requesterId, SlotCommands.PutUpCandidate c) {
            java.util.function.Supplier<SlotEvent.CandidateInscriptionPutUpV2> eventFactory = () -> newCandidateInscriptionPutUpV2(candidateInscription, clock, offChainVersion, commandId, requesterId);
            SlotEvent.CandidateInscriptionPutUpV2 e;
            try {
                e = verifyPutUpCandidate(eventFactory, candidateInscription, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void advance(String clock, Long offChainVersion, String commandId, String requesterId, SlotCommands.Advance c) {
            java.util.function.Supplier<SlotEvent.SlotAdvanced> eventFactory = () -> newSlotAdvanced(clock, offChainVersion, commandId, requesterId);
            SlotEvent.SlotAdvanced e;
            try {
                e = verifyAdvance(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected SlotEvent.SlotCreated verifyCreate(java.util.function.Supplier<SlotEvent.SlotCreated> eventFactory, SlotCommands.Create c) {

            SlotEvent.SlotCreated e = (SlotEvent.SlotCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.slot.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SlotState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.dddappp.suiinscription.domain.slot;
//
//public class CreateLogic {
//    public static SlotEvent.SlotCreated verify(java.util.function.Supplier<SlotEvent.SlotCreated> eventFactory, SlotState slotState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SlotEvent.CandidateInscriptionPutUpV2 verifyPutUpCandidate(java.util.function.Supplier<SlotEvent.CandidateInscriptionPutUpV2> eventFactory, String candidateInscription, SlotCommands.PutUpCandidate c) {
            String CandidateInscription = candidateInscription;

            SlotEvent.CandidateInscriptionPutUpV2 e = (SlotEvent.CandidateInscriptionPutUpV2) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.slot.PutUpCandidateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SlotState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), candidateInscription, VerificationContext.forCommand(c)}
            );

//package org.dddappp.suiinscription.domain.slot;
//
//public class PutUpCandidateLogic {
//    public static SlotEvent.CandidateInscriptionPutUpV2 verify(java.util.function.Supplier<SlotEvent.CandidateInscriptionPutUpV2> eventFactory, SlotState slotState, String candidateInscription, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SlotEvent.SlotAdvanced verifyAdvance(java.util.function.Supplier<SlotEvent.SlotAdvanced> eventFactory, SlotCommands.Advance c) {

            SlotEvent.SlotAdvanced e = (SlotEvent.SlotAdvanced) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.slot.AdvanceLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SlotState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.dddappp.suiinscription.domain.slot;
//
//public class AdvanceLogic {
//    public static SlotEvent.SlotAdvanced verify(java.util.function.Supplier<SlotEvent.SlotAdvanced> eventFactory, SlotState slotState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractSlotEvent.SlotCreated newSlotCreated(String clock, Long offChainVersion, String commandId, String requesterId) {
            SlotEventId eventId = new SlotEventId(getState().getSlotNumber(), null);
            AbstractSlotEvent.SlotCreated e = new AbstractSlotEvent.SlotCreated();

            e.setGenesisTimestamp(null);
            e.setSlotMaxAmount(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSlotEventId(eventId);
            return e;
        }

        protected AbstractSlotEvent.CandidateInscriptionPutUpV2 newCandidateInscriptionPutUpV2(String candidateInscription, String clock, Long offChainVersion, String commandId, String requesterId) {
            SlotEventId eventId = new SlotEventId(getState().getSlotNumber(), null);
            AbstractSlotEvent.CandidateInscriptionPutUpV2 e = new AbstractSlotEvent.CandidateInscriptionPutUpV2();

            e.setCandidateInscriptionId(null);
            e.setRound(null);
            e.setCandidateHash(null);
            e.setCandidateInscriber(null);
            e.setCandidateTimestamp(null);
            e.setCandidateAmount(null);
            e.setCandidateNonce(null);
            e.setCandidateDifference(null);
            e.setCandidateContent(null);
            e.setSuccessful(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSlotEventId(eventId);
            return e;
        }

        protected AbstractSlotEvent.SlotAdvanced newSlotAdvanced(String clock, Long offChainVersion, String commandId, String requesterId) {
            SlotEventId eventId = new SlotEventId(getState().getSlotNumber(), null);
            AbstractSlotEvent.SlotAdvanced e = new AbstractSlotEvent.SlotAdvanced();

            e.setRound(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSlotEventId(eventId);
            return e;
        }

    }

}

