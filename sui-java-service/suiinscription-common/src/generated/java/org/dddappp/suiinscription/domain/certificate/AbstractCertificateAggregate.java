// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain.certificate;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.specialization.*;

public abstract class AbstractCertificateAggregate extends AbstractAggregate implements CertificateAggregate {
    private CertificateState.MutableCertificateState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractCertificateAggregate(CertificateState state) {
        this.state = (CertificateState.MutableCertificateState)state;
    }

    public CertificateState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        CertificateCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleCertificateAggregate extends AbstractCertificateAggregate {
        public SimpleCertificateAggregate(CertificateState state) {
            super(state);
        }

        @Override
        public void issue(String inscriptionId, int[] inscriptionHash, Integer slotNumber, BigInteger round, String inscriber, BigInteger inscriptionTimestamp, BigInteger amount, BigInteger inscriptionNonce, String inscriptionContent, Long offChainVersion, String commandId, String requesterId, CertificateCommands.Issue c) {
            java.util.function.Supplier<CertificateEvent.CertificateIssued> eventFactory = () -> newCertificateIssued(inscriptionId, inscriptionHash, slotNumber, round, inscriber, inscriptionTimestamp, amount, inscriptionNonce, inscriptionContent, offChainVersion, commandId, requesterId);
            CertificateEvent.CertificateIssued e;
            try {
                e = verifyIssue(eventFactory, inscriptionId, inscriptionHash, slotNumber, round, inscriber, inscriptionTimestamp, amount, inscriptionNonce, inscriptionContent, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected CertificateEvent.CertificateIssued verifyIssue(java.util.function.Supplier<CertificateEvent.CertificateIssued> eventFactory, String inscriptionId, int[] inscriptionHash, Integer slotNumber, BigInteger round, String inscriber, BigInteger inscriptionTimestamp, BigInteger amount, BigInteger inscriptionNonce, String inscriptionContent, CertificateCommands.Issue c) {
            String InscriptionId = inscriptionId;
            int[] InscriptionHash = inscriptionHash;
            Integer SlotNumber = slotNumber;
            BigInteger Round = round;
            String Inscriber = inscriber;
            BigInteger InscriptionTimestamp = inscriptionTimestamp;
            BigInteger Amount = amount;
            BigInteger InscriptionNonce = inscriptionNonce;
            String InscriptionContent = inscriptionContent;

            CertificateEvent.CertificateIssued e = (CertificateEvent.CertificateIssued) ReflectUtils.invokeStaticMethod(
                    "org.dddappp.suiinscription.domain.certificate.IssueLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, CertificateState.class, String.class, int[].class, Integer.class, BigInteger.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), inscriptionId, inscriptionHash, slotNumber, round, inscriber, inscriptionTimestamp, amount, inscriptionNonce, inscriptionContent, VerificationContext.forCommand(c)}
            );

//package org.dddappp.suiinscription.domain.certificate;
//
//public class IssueLogic {
//    public static CertificateEvent.CertificateIssued verify(java.util.function.Supplier<CertificateEvent.CertificateIssued> eventFactory, CertificateState certificateState, String inscriptionId, int[] inscriptionHash, Integer slotNumber, BigInteger round, String inscriber, BigInteger inscriptionTimestamp, BigInteger amount, BigInteger inscriptionNonce, String inscriptionContent, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractCertificateEvent.CertificateIssued newCertificateIssued(String inscriptionId, int[] inscriptionHash, Integer slotNumber, BigInteger round, String inscriber, BigInteger inscriptionTimestamp, BigInteger amount, BigInteger inscriptionNonce, String inscriptionContent, Long offChainVersion, String commandId, String requesterId) {
            CertificateEventId eventId = new CertificateEventId(getState().getId(), null);
            AbstractCertificateEvent.CertificateIssued e = new AbstractCertificateEvent.CertificateIssued();

            e.setInscriptionId(inscriptionId);
            e.setInscriptionHash(inscriptionHash);
            e.setSlotNumber(slotNumber);
            e.setRound(round);
            e.setInscriber(inscriber);
            e.setInscriptionTimestamp(inscriptionTimestamp);
            e.setAmount(amount);
            e.setInscriptionNonce(inscriptionNonce);
            e.setInscriptionContent(inscriptionContent);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setCertificateEventId(eventId);
            return e;
        }

    }

}

