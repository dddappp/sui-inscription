// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.domain.certificate;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.specialization.*;


public class CertificateStateDto {

    private String id;

    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    private String inscriptionId;

    public String getInscriptionId()
    {
        return this.inscriptionId;
    }

    public void setInscriptionId(String inscriptionId)
    {
        this.inscriptionId = inscriptionId;
    }

    private int[] inscriptionHash;

    public int[] getInscriptionHash()
    {
        return this.inscriptionHash;
    }

    public void setInscriptionHash(int[] inscriptionHash)
    {
        this.inscriptionHash = inscriptionHash;
    }

    private Integer slotNumber;

    public Integer getSlotNumber()
    {
        return this.slotNumber;
    }

    public void setSlotNumber(Integer slotNumber)
    {
        this.slotNumber = slotNumber;
    }

    private BigInteger round;

    public BigInteger getRound()
    {
        return this.round;
    }

    public void setRound(BigInteger round)
    {
        this.round = round;
    }

    private String inscriber;

    public String getInscriber()
    {
        return this.inscriber;
    }

    public void setInscriber(String inscriber)
    {
        this.inscriber = inscriber;
    }

    private BigInteger inscriptionTimestamp;

    public BigInteger getInscriptionTimestamp()
    {
        return this.inscriptionTimestamp;
    }

    public void setInscriptionTimestamp(BigInteger inscriptionTimestamp)
    {
        this.inscriptionTimestamp = inscriptionTimestamp;
    }

    private BigInteger amount;

    public BigInteger getAmount()
    {
        return this.amount;
    }

    public void setAmount(BigInteger amount)
    {
        this.amount = amount;
    }

    private BigInteger inscriptionNonce;

    public BigInteger getInscriptionNonce()
    {
        return this.inscriptionNonce;
    }

    public void setInscriptionNonce(BigInteger inscriptionNonce)
    {
        this.inscriptionNonce = inscriptionNonce;
    }

    private String inscriptionContent;

    public String getInscriptionContent()
    {
        return this.inscriptionContent;
    }

    public void setInscriptionContent(String inscriptionContent)
    {
        this.inscriptionContent = inscriptionContent;
    }

    private BigInteger version;

    public BigInteger getVersion()
    {
        return this.version;
    }

    public void setVersion(BigInteger version)
    {
        this.version = version;
    }

    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }

    private Long offChainVersion;

    public Long getOffChainVersion()
    {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion)
    {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public CertificateStateDto[] toCertificateStateDtoArray(Iterable<CertificateState> states) {
            return toCertificateStateDtoList(states).toArray(new CertificateStateDto[0]);
        }

        public List<CertificateStateDto> toCertificateStateDtoList(Iterable<CertificateState> states) {
            ArrayList<CertificateStateDto> stateDtos = new ArrayList();
            for (CertificateState s : states) {
                CertificateStateDto dto = toCertificateStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public CertificateStateDto toCertificateStateDto(CertificateState state)
        {
            if(state == null) {
                return null;
            }
            CertificateStateDto dto = new CertificateStateDto();
            if (returnedFieldsContains("Id")) {
                dto.setId(state.getId());
            }
            if (returnedFieldsContains("InscriptionId")) {
                dto.setInscriptionId(state.getInscriptionId());
            }
            if (returnedFieldsContains("InscriptionHash")) {
                dto.setInscriptionHash(state.getInscriptionHash());
            }
            if (returnedFieldsContains("SlotNumber")) {
                dto.setSlotNumber(state.getSlotNumber());
            }
            if (returnedFieldsContains("Round")) {
                dto.setRound(state.getRound());
            }
            if (returnedFieldsContains("Inscriber")) {
                dto.setInscriber(state.getInscriber());
            }
            if (returnedFieldsContains("InscriptionTimestamp")) {
                dto.setInscriptionTimestamp(state.getInscriptionTimestamp());
            }
            if (returnedFieldsContains("Amount")) {
                dto.setAmount(state.getAmount());
            }
            if (returnedFieldsContains("InscriptionNonce")) {
                dto.setInscriptionNonce(state.getInscriptionNonce());
            }
            if (returnedFieldsContains("InscriptionContent")) {
                dto.setInscriptionContent(state.getInscriptionContent());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("Active")) {
                dto.setActive(state.getActive());
            }
            if (returnedFieldsContains("OffChainVersion")) {
                dto.setOffChainVersion(state.getOffChainVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

