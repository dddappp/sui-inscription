// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.config;

import org.dddappp.suiinscription.domain.inscription.*;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.domain.inscription.hibernate.*;
import org.dddappp.suiinscription.domain.certificate.*;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.domain.certificate.hibernate.*;
import org.dddappp.suiinscription.domain.slot.*;
import org.dddappp.suiinscription.domain.*;
import org.dddappp.suiinscription.domain.slot.hibernate.*;
import org.dddappp.suiinscription.specialization.AggregateEventListener;
import org.dddappp.suiinscription.specialization.EventStore;
import org.dddappp.suiinscription.specialization.IdGenerator;
import org.dddappp.suiinscription.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public InscriptionStateRepository inscriptionStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateInscriptionStateRepository repository = new HibernateInscriptionStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public InscriptionStateQueryRepository inscriptionStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateInscriptionStateQueryRepository repository = new HibernateInscriptionStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateInscriptionEventStore inscriptionEventStore(SessionFactory hibernateSessionFactory) {
        HibernateInscriptionEventStore eventStore = new HibernateInscriptionEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractInscriptionApplicationService.SimpleInscriptionApplicationService inscriptionApplicationService(
            @Qualifier("inscriptionEventStore") EventStore inscriptionEventStore,
            InscriptionStateRepository inscriptionStateRepository,
            InscriptionStateQueryRepository inscriptionStateQueryRepository
    ) {
        AbstractInscriptionApplicationService.SimpleInscriptionApplicationService applicationService = new AbstractInscriptionApplicationService.SimpleInscriptionApplicationService(
                inscriptionEventStore,
                inscriptionStateRepository,
                inscriptionStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public CertificateStateRepository certificateStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateCertificateStateRepository repository = new HibernateCertificateStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public CertificateStateQueryRepository certificateStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateCertificateStateQueryRepository repository = new HibernateCertificateStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateCertificateEventStore certificateEventStore(SessionFactory hibernateSessionFactory) {
        HibernateCertificateEventStore eventStore = new HibernateCertificateEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractCertificateApplicationService.SimpleCertificateApplicationService certificateApplicationService(
            @Qualifier("certificateEventStore") EventStore certificateEventStore,
            CertificateStateRepository certificateStateRepository,
            CertificateStateQueryRepository certificateStateQueryRepository
    ) {
        AbstractCertificateApplicationService.SimpleCertificateApplicationService applicationService = new AbstractCertificateApplicationService.SimpleCertificateApplicationService(
                certificateEventStore,
                certificateStateRepository,
                certificateStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public SlotStateRepository slotStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateSlotStateRepository repository = new HibernateSlotStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public SlotStateQueryRepository slotStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateSlotStateQueryRepository repository = new HibernateSlotStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateSlotEventStore slotEventStore(SessionFactory hibernateSessionFactory) {
        HibernateSlotEventStore eventStore = new HibernateSlotEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractSlotApplicationService.SimpleSlotApplicationService slotApplicationService(
            @Qualifier("slotEventStore") EventStore slotEventStore,
            SlotStateRepository slotStateRepository,
            SlotStateQueryRepository slotStateQueryRepository
    ) {
        AbstractSlotApplicationService.SimpleSlotApplicationService applicationService = new AbstractSlotApplicationService.SimpleSlotApplicationService(
                slotEventStore,
                slotStateRepository,
                slotStateQueryRepository
        );
        return applicationService;
    }


}
