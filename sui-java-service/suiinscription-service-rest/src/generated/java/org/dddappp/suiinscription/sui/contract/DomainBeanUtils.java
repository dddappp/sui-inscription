// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.sui.contract;

import java.math.*;

import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import org.dddappp.suiinscription.domain.inscription.AbstractInscriptionEvent;
import org.dddappp.suiinscription.sui.contract.inscription.InscriptionMinted;
import org.dddappp.suiinscription.sui.contract.inscription.InscriptionDeleted;
import org.dddappp.suiinscription.domain.certificate.AbstractCertificateEvent;
import org.dddappp.suiinscription.sui.contract.certificate.CertificateIssued;
import org.dddappp.suiinscription.domain.slot.AbstractSlotEvent;
import org.dddappp.suiinscription.sui.contract.slot.SlotCreated;
import org.dddappp.suiinscription.sui.contract.slot.CandidateInscriptionPutUp;
import org.dddappp.suiinscription.sui.contract.slot.SlotAdvanced;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }


    public static AbstractInscriptionEvent.InscriptionMinted toInscriptionMinted(SuiMoveEventEnvelope<InscriptionMinted> eventEnvelope) {
        InscriptionMinted contractEvent = eventEnvelope.getParsedJson();

        AbstractInscriptionEvent.InscriptionMinted inscriptionMinted = new AbstractInscriptionEvent.InscriptionMinted();
        inscriptionMinted.setId(contractEvent.getId());
        inscriptionMinted.setSlotNumber(contractEvent.getSlotNumber());
        inscriptionMinted.setRound(contractEvent.getRound());
        inscriptionMinted.setAmount(contractEvent.getAmount());
        inscriptionMinted.setNonce(contractEvent.getNonce());
        inscriptionMinted.setContent(contractEvent.getContent());
        inscriptionMinted.setInscriber(contractEvent.getInscriber());
        inscriptionMinted.setTimestamp(contractEvent.getTimestamp());
        inscriptionMinted.setHash(contractEvent.getHash());
        inscriptionMinted.setVersion(BigInteger.valueOf(-1));

        inscriptionMinted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        inscriptionMinted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        inscriptionMinted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        inscriptionMinted.setSuiPackageId(eventEnvelope.getPackageId());
        inscriptionMinted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        inscriptionMinted.setSuiSender(eventEnvelope.getSender());

        return inscriptionMinted;
    }

    public static AbstractInscriptionEvent.InscriptionDeleted toInscriptionDeleted(SuiMoveEventEnvelope<InscriptionDeleted> eventEnvelope) {
        InscriptionDeleted contractEvent = eventEnvelope.getParsedJson();

        AbstractInscriptionEvent.InscriptionDeleted inscriptionDeleted = new AbstractInscriptionEvent.InscriptionDeleted();
        inscriptionDeleted.setId(contractEvent.getId());
        inscriptionDeleted.setVersion(contractEvent.getVersion());

        inscriptionDeleted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        inscriptionDeleted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        inscriptionDeleted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        inscriptionDeleted.setSuiPackageId(eventEnvelope.getPackageId());
        inscriptionDeleted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        inscriptionDeleted.setSuiSender(eventEnvelope.getSender());

        return inscriptionDeleted;
    }

    public static AbstractCertificateEvent.CertificateIssued toCertificateIssued(SuiMoveEventEnvelope<CertificateIssued> eventEnvelope) {
        CertificateIssued contractEvent = eventEnvelope.getParsedJson();

        AbstractCertificateEvent.CertificateIssued certificateIssued = new AbstractCertificateEvent.CertificateIssued();
        certificateIssued.setId(contractEvent.getId());
        certificateIssued.setInscriptionId(contractEvent.getInscriptionId());
        certificateIssued.setInscriptionHash(contractEvent.getInscriptionHash());
        certificateIssued.setSlotNumber(contractEvent.getSlotNumber());
        certificateIssued.setRound(contractEvent.getRound());
        certificateIssued.setInscriber(contractEvent.getInscriber());
        certificateIssued.setInscriptionTimestamp(contractEvent.getInscriptionTimestamp());
        certificateIssued.setAmount(contractEvent.getAmount());
        certificateIssued.setInscriptionNonce(contractEvent.getInscriptionNonce());
        certificateIssued.setInscriptionContent(contractEvent.getInscriptionContent());
        certificateIssued.setVersion(BigInteger.valueOf(-1));

        certificateIssued.setSuiTimestamp(eventEnvelope.getTimestampMs());
        certificateIssued.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        certificateIssued.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        certificateIssued.setSuiPackageId(eventEnvelope.getPackageId());
        certificateIssued.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        certificateIssued.setSuiSender(eventEnvelope.getSender());

        return certificateIssued;
    }

    public static AbstractSlotEvent.SlotCreated toSlotCreated(SuiMoveEventEnvelope<SlotCreated> eventEnvelope) {
        SlotCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractSlotEvent.SlotCreated slotCreated = new AbstractSlotEvent.SlotCreated();
        slotCreated.setId_(contractEvent.getId());
        slotCreated.setSlotNumber(contractEvent.getSlotNumber());
        slotCreated.setGenesisTimestamp(contractEvent.getGenesisTimestamp());
        slotCreated.setSlotMaxAmount(contractEvent.getSlotMaxAmount());
        slotCreated.setVersion(BigInteger.valueOf(-1));

        slotCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        slotCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        slotCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        slotCreated.setSuiPackageId(eventEnvelope.getPackageId());
        slotCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        slotCreated.setSuiSender(eventEnvelope.getSender());

        return slotCreated;
    }

    public static AbstractSlotEvent.CandidateInscriptionPutUp toCandidateInscriptionPutUp(SuiMoveEventEnvelope<CandidateInscriptionPutUp> eventEnvelope) {
        CandidateInscriptionPutUp contractEvent = eventEnvelope.getParsedJson();

        AbstractSlotEvent.CandidateInscriptionPutUp candidateInscriptionPutUp = new AbstractSlotEvent.CandidateInscriptionPutUp();
        candidateInscriptionPutUp.setId_(contractEvent.getId());
        candidateInscriptionPutUp.setSlotNumber(contractEvent.getSlotNumber());
        candidateInscriptionPutUp.setCandidateInscriptionId(contractEvent.getCandidateInscriptionId());
        candidateInscriptionPutUp.setRound(contractEvent.getRound());
        candidateInscriptionPutUp.setCandidateHash(contractEvent.getCandidateHash());
        candidateInscriptionPutUp.setCandidateInscriber(contractEvent.getCandidateInscriber());
        candidateInscriptionPutUp.setCandidateTimestamp(contractEvent.getCandidateTimestamp());
        candidateInscriptionPutUp.setCandidateAmount(contractEvent.getCandidateAmount());
        candidateInscriptionPutUp.setCandidateNonce(contractEvent.getCandidateNonce());
        candidateInscriptionPutUp.setCandidateDifference(contractEvent.getCandidateDifference());
        candidateInscriptionPutUp.setCandidateContent(contractEvent.getCandidateContent());
        candidateInscriptionPutUp.setVersion(contractEvent.getVersion());

        candidateInscriptionPutUp.setSuiTimestamp(eventEnvelope.getTimestampMs());
        candidateInscriptionPutUp.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        candidateInscriptionPutUp.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        candidateInscriptionPutUp.setSuiPackageId(eventEnvelope.getPackageId());
        candidateInscriptionPutUp.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        candidateInscriptionPutUp.setSuiSender(eventEnvelope.getSender());

        return candidateInscriptionPutUp;
    }

    public static AbstractSlotEvent.SlotAdvanced toSlotAdvanced(SuiMoveEventEnvelope<SlotAdvanced> eventEnvelope) {
        SlotAdvanced contractEvent = eventEnvelope.getParsedJson();

        AbstractSlotEvent.SlotAdvanced slotAdvanced = new AbstractSlotEvent.SlotAdvanced();
        slotAdvanced.setId_(contractEvent.getId());
        slotAdvanced.setSlotNumber(contractEvent.getSlotNumber());
        slotAdvanced.setRound(contractEvent.getRound());
        slotAdvanced.setVersion(contractEvent.getVersion());

        slotAdvanced.setSuiTimestamp(eventEnvelope.getTimestampMs());
        slotAdvanced.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        slotAdvanced.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        slotAdvanced.setSuiPackageId(eventEnvelope.getPackageId());
        slotAdvanced.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        slotAdvanced.setSuiSender(eventEnvelope.getSender());

        return slotAdvanced;
    }

}
