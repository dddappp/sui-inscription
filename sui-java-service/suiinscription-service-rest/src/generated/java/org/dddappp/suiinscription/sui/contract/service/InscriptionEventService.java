// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddappp.suiinscription.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.dddappp.suiinscription.domain.inscription.AbstractInscriptionEvent;
import org.dddappp.suiinscription.sui.contract.ContractConstants;
import org.dddappp.suiinscription.sui.contract.DomainBeanUtils;
import org.dddappp.suiinscription.sui.contract.SuiPackage;
import org.dddappp.suiinscription.sui.contract.inscription.InscriptionMinted;
import org.dddappp.suiinscription.sui.contract.inscription.InscriptionDeleted;
import org.dddappp.suiinscription.sui.contract.repository.InscriptionEventRepository;
import org.dddappp.suiinscription.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class InscriptionEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("InscriptionDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractInscriptionEvent e) {
        if (isDeletionCommand(e.getEventType())) {
            return true;
        }
        return false;
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private InscriptionEventRepository inscriptionEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractInscriptionEvent event) {
        event.setStatus("D");
        inscriptionEventRepository.save(event);
    }

    @Transactional
    public void pullInscriptionMintedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getInscriptionMintedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<InscriptionMinted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.INSCRIPTION_MODULE_INSCRIPTION_MINTED,
                    cursor, limit, false, InscriptionMinted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<InscriptionMinted> eventEnvelope : eventPage.getData()) {
                    saveInscriptionMinted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getInscriptionMintedEventNextCursor() {
        AbstractInscriptionEvent lastEvent = inscriptionEventRepository.findFirstInscriptionMintedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveInscriptionMinted(SuiMoveEventEnvelope<InscriptionMinted> eventEnvelope) {
        AbstractInscriptionEvent.InscriptionMinted inscriptionMinted = DomainBeanUtils.toInscriptionMinted(eventEnvelope);
        if (inscriptionEventRepository.findById(inscriptionMinted.getInscriptionEventId()).isPresent()) {
            return;
        }
        inscriptionEventRepository.save(inscriptionMinted);
    }

    @Transactional
    public void pullInscriptionDeletedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getInscriptionDeletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<InscriptionDeleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.INSCRIPTION_MODULE_INSCRIPTION_DELETED,
                    cursor, limit, false, InscriptionDeleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<InscriptionDeleted> eventEnvelope : eventPage.getData()) {
                    saveInscriptionDeleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getInscriptionDeletedEventNextCursor() {
        AbstractInscriptionEvent lastEvent = inscriptionEventRepository.findFirstInscriptionDeletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveInscriptionDeleted(SuiMoveEventEnvelope<InscriptionDeleted> eventEnvelope) {
        AbstractInscriptionEvent.InscriptionDeleted inscriptionDeleted = DomainBeanUtils.toInscriptionDeleted(eventEnvelope);
        if (inscriptionEventRepository.findById(inscriptionDeleted.getInscriptionEventId()).isPresent()) {
            return;
        }
        inscriptionEventRepository.save(inscriptionDeleted);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
