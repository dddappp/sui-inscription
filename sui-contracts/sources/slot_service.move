// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_inscription::slot_service {
    use std::string::String;
    use sui::clock;

    use sui::clock::Clock;
    use sui::tx_context;
    use sui_inscription::id_util;
    use sui_inscription::time_util;

    use sui_inscription::inscription;
    use sui_inscription::inscription::Inscription;
    use sui_inscription::inscription_aggregate;
    use sui_inscription::slot;
    use sui_inscription::slot_aggregate;

    public entry fun advance_and_put_up_candidate(
        slot: &mut slot::Slot,
        candidate_inscription: &Inscription,
        clock: &Clock,
        ctx: &mut tx_context::TxContext,
    ) {
        slot_aggregate::advance(slot, clock, ctx);
        slot_aggregate::put_up_candidate(slot, candidate_inscription, clock, ctx);
    }

    public entry fun mint_and_put_up_candidate(
        slot: &mut slot::Slot,
        amount: u64,
        nonce: u128,
        content: String,
        clock: &Clock,
        ctx: &mut tx_context::TxContext,
    ) {
        let slot_number = slot::slot_number(slot);
        let round = slot::round(slot);
        let inscription = inscription_aggregate::mint_v2(
            slot_number,
            round,
            amount,
            nonce,
            content,
            clock,
            ctx,
        );
        slot_aggregate::put_up_candidate(slot, &inscription, clock, ctx);
        inscription::transfer_object(inscription, tx_context::sender(ctx));
    }

    public entry fun advance_and_mint_and_put_up_candidate(
        slot: &mut slot::Slot,
        amount: u64,
        nonce: u128,
        content: String,
        clock: &Clock,
        ctx: &mut tx_context::TxContext,
    ) {
        let round = slot::round(slot);
        let due_rounds = time_util::count_rounds(slot::genesis_timestamp(slot), clock::timestamp_ms(clock));
        if (due_rounds > round && id_util::id_placeholder() != slot::candidate_inscription_id(slot)) {
            slot_aggregate::advance(slot, clock, ctx);
        };
        mint_and_put_up_candidate(slot, amount, nonce, content, clock, ctx);
    }
}
