// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_inscription::inscription_aggregate {
    use std::string::String;
    use sui::clock::Clock;
    use sui::tx_context;
    use sui_inscription::inscription;
    use sui_inscription::inscription_delete_logic;
    use sui_inscription::inscription_mint_logic;
    use sui_inscription::inscription_mint_v2_logic;

    public entry fun mint(
        slot_number: u8,
        round: u64,
        amount: u64,
        nonce: u128,
        content: String,
        clock: &Clock,
        ctx: &mut tx_context::TxContext,
    ) {
        let inscription_minted = inscription_mint_logic::verify(
            slot_number,
            round,
            amount,
            nonce,
            content,
            clock,
            ctx,
        );
        let inscription = inscription_mint_logic::mutate(
            &inscription_minted,
            ctx,
        );
        inscription::set_inscription_minted_id(&mut inscription_minted, inscription::id(&inscription));
        inscription::transfer_object(inscription, tx_context::sender(ctx));
        inscription::emit_inscription_minted(inscription_minted);
    }

    public(friend) fun mint_v2(
        slot_number: u8,
        round: u64,
        amount: u64,
        nonce: u128,
        content: String,
        clock: &Clock,
        ctx: &mut tx_context::TxContext,
    ): inscription::Inscription {
        let inscription_minted = inscription_mint_v2_logic::verify(
            slot_number,
            round,
            amount,
            nonce,
            content,
            clock,
            ctx,
        );
        let inscription = inscription_mint_v2_logic::mutate(
            &inscription_minted,
            ctx,
        );
        inscription::set_inscription_minted_id(&mut inscription_minted, inscription::id(&inscription));
        inscription::emit_inscription_minted(inscription_minted);
        inscription
    }

    public entry fun delete(
        inscription: inscription::Inscription,
        ctx: &mut tx_context::TxContext,
    ) {
        let inscription_deleted = inscription_delete_logic::verify(
            &inscription,
            ctx,
        );
        let updated_inscription = inscription_delete_logic::mutate(
            &inscription_deleted,
            inscription,
            ctx,
        );
        inscription::drop_inscription(updated_inscription);
        inscription::emit_inscription_deleted(inscription_deleted);
    }

}
